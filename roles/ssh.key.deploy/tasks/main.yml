---
# tasks file for roles/ns.ora.ssh.deploy.key
- name: "deploy ssh keys to root for all IT and India/apprentices"
  block:
    - assert:
        that:
          - "ansible_hostname not in restricted_hosts"
        msg: "ansible_hostname is a restricted host, so will not deploy all IT ssh keys, you can change that behaviour in the 'var' file"
      register: "restricted_host"
    - name: "get 'root' HOME dir"
      command: "grep ^root /etc/passwd"
      register: "root_lives_at"
      tags: "get_root_HOME_dir"
    - name: "push ssh keys to remote host for all"
      authorized_key:
        user: "root"
        state: "present"
        exclusive: "yes"
        path: "{{root_lives_at.stdout.split(':')[5]}}/.ssh/authorized_keys2"
        manage_dir: "yes"
        key: "{{lookup('pipe','cat {{HOME}}tmp/keys/all_IT/*.pub')}}"
      when: "root_lives_at|success"
      register: "deploy_ssh_keys_all"
      tags: "deploy_ssh_keys"  
    - name: "create a description link root all hosts"
      file:
        src: "{{root_lives_at.stdout.split(':')[5]}}/.ssh/authorized_keys2"
        dest: "{{root_lives_at.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
        state: "link"
        force: "yes"
      when: "deploy_ssh_keys_all|success"
      tags: "link_desc_4_authorized_keys2_all_hosts"

#- name: "deploy ssh keys to root for IT not for India IT and apprentices"
  rescue:
    - assert:
        that:
          - "ansible_hostname in restricted_hosts"
        msg: "ansible_hostname is a normal host, so will deploy all IT ssh keys, you can change that behaviour in the 'var' file"
    - name: "get 'root' HOME dir"
      command: "grep ^root /etc/passwd"
      register: "root_lives_at"
      tags: "get_root_HOME_dir"
    - name: "push ssh keys to remote host ONLY for IT-Services germany (ONLY restricted hosts)"
      authorized_key:
        user: "root"
        state: "present"
        exclusive: "yes"
        path: ".ssh/authorized_keys2"
        manage_dir: "yes"
        key: "{{lookup('pipe','cat {{HOME}}tmp/keys/only-root/*.pub')}}"
      when: "root_lives_at|success"
      register: "deploy_ssh_keys_restricted_hosts"
      tags: "deploy_ssh_keys_restricted_hosts"
    - name: "create a description link root restricted hosts"
      file:
        src: "{{root_lives_at.stdout.split(':')[5]}}/.ssh/authorized_keys2"
        dest: "{{root_lives_at.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
        state: "link"
        force: "yes"
      when: "deploy_ssh_keys_restricted_hosts|success"
      tags: "link_desc_4_authorized_keys2_restricted_hosts"

  always:
    - name: "deploy ssh keys of non-privileged users"
      block:
        - name: "check if user nagios exists"
          shell: "grep ^nagios /etc/passwd; true"
          register: "ssh_keys_for_nagios"
          tags: "ssh_keys_for_nagios"
        - name: "check if user corpus exists"
          shell: "grep ^corpus /etc/passwd; true"
          register: "ssh_keys_for_corpus"
          tags: "ssh_keys_for_corpus"
        - name: "check if user oracle exists"
          shell: "grep ^oracle /etc/passwd; true"
          register: "ssh_keys_for_oracle"
          tags: "ssh_keys_for_oracle"
        - name: "check if user postgres exists"
          shell: "grep ^postgres /etc/passwd; true"
          register: "ssh_keys_for_postgres"
          tags: "ssh_keys_for_postgres"
        - name: "check if user git exists"
          shell: "grep ^git /etc/passwd; true"
          register: "ssh_keys_for_git"
          tags: "ssh_keys_for_git"
        - name: "deploy ssh keys for user nagios"
          authorized_key:
            user: "nagios"
            state: "present"
            exclusive: "yes"
            path: "{{ssh_keys_for_nagios.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            manage_dir: "yes"
            key: "{{lookup('pipe','cat {{HOME}}tmp/keys/only-root/*.pub')}}"
          register: "deploy_ssh_keys_user_nagios"
          tags: "deploy_ssh_keys_user_nagios" 
          when: "(ssh_keys_for_nagios.stdout|default('') != '')"
        - name: "deploy ssh keys for user corpus"
          authorized_key:
            user: "corpus"
            state: "present"
            exclusive: "yes"
            path: "{{ssh_keys_for_corpus.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            manage_dir: "yes"
            key: "{{lookup('pipe','cat {{HOME}}tmp/keys/non-privileged/*.pub')}}"
          register: "deploy_ssh_keys_user_corpus"
          tags: "deploy_ssh_keys_user_corpus" 
          when: "(ssh_keys_for_corpus.stdout|default('') != '')"
        - name: "deploy ssh keys for user oracle"
          authorized_key:
            user: "oracle"
            state: "present"
            exclusive: "yes"
            path: "{{ssh_keys_for_oracle.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            manage_dir: "yes"
            key: "{{lookup('pipe','cat {{HOME}}tmp/keys/non-privileged/*.pub')}}"
          register: "deploy_ssh_keys_user_oracle"
          tags: "deploy_ssh_keys_user_oracle" 
          when: "(ssh_keys_for_oracle.stdout|default('') != '')"
        - name: "deploy ssh keys for user postgres"
          authorized_key:
            user: "postgres"
            state: "present"
            exclusive: "yes"
            path: "{{ssh_keys_for_postgres.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            manage_dir: "yes"
            key: "{{lookup('pipe','cat {{HOME}}tmp/keys/non-privileged/*.pub')}}"
          register: "deploy_ssh_keys_user_postgres"
          tags: "deploy_ssh_keys_user_postgres" 
          when: "(ssh_keys_for_postgres.stdout|default('') != '')"
        - name: "deploy ssh keys for user git"
          authorized_key:
            user: "git"
            state: "present"
            exclusive: "yes"
            path: "{{ssh_keys_for_git.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            manage_dir: "yes"
            key: "{{lookup('pipe','cat {{HOME}}tmp/keys/only-root/*.pub')}}"
          register: "deploy_ssh_keys_user_git"
          tags: "deploy_ssh_keys_user_git" 
          when: "(ssh_keys_for_git.stdout|default('') != '')"
        - name: "create a description link nagios"
          file:
            src: "{{ssh_keys_for_nagios.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            dest: "{{ssh_keys_for_nagios.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
            state: "link"
            force: "yes"
          when: "(ssh_keys_for_nagios.stdout|default('') != '' and deploy_ssh_keys_user_nagios|success)"
          tags: "link_desc_4_authorized_keys2_user_nagios"
        - name: "create a description link corpus"
          file:
            src: "{{ssh_keys_for_corpus.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            dest: "{{ssh_keys_for_corpus.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
            state: "link"
            force: "yes"
          when: "(ssh_keys_for_corpus.stdout|default('') != '' and deploy_ssh_keys_user_corpus|success)"
          tags: "link_desc_4_authorized_keys2_user_corpus"
        - name: "create a description link oracle"
          file:
            src: "{{ssh_keys_for_oracle.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            dest: "{{ssh_keys_for_oracle.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
            state: "link"
            force: "yes"
          when: "(ssh_keys_for_oracle.stdout|default('') != '' and deploy_ssh_keys_user_oracle|success)"
          tags: "link_desc_4_authorized_keys2_user_oracle"
        - name: "create a description link postgres"
          file:
            src: "{{ssh_keys_for_postgres.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            dest: "{{ssh_keys_for_postgres.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
            state: "link"
            force: "yes"
          when: "(ssh_keys_for_postgres.stdout|default('') != '' and deploy_ssh_keys_user_postgres|success)"
          tags: "link_desc_4_authorized_keys2_user_postgres"
        - name: "create a description link git"
          file:
            src: "{{ssh_keys_for_git.stdout.split(':')[5]}}/.ssh/authorized_keys2"
            dest: "{{ssh_keys_for_git.stdout.split(':')[5]}}/.ssh/censhare_ansible_exclusive_managed_ssh-keys"
            state: "link"
            force: "yes"
          when: "(ssh_keys_for_git.stdout|default('') != '' and deploy_ssh_keys_user_git|success)"
          tags: "link_desc_4_authorized_keys2_user_git"